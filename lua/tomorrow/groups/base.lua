local Util = require("tomorrow.util")

local M = {}

---@type tomorrow.HighlightsFn
function M.get(c, opts)
    return {
        Normal = { fg = c.foreground, bg = c.background, },
        LineNr = { fg = c.selection, },
        NonText = { fg = c.selection, },
        SpecialKey = { fg = c.selection, },
        Search = { fg = c.background, bg = c.yellow, },
        TabLine = { fg = c.window, bg = c.foreground, },
        TabLineFill = { fg = c.window, bg = c.foreground, },
        StatusLine = { fg = c.window, bg = c.yellow, },
        StatusLineNC = { fg = c.window, bg = c.foreground, },
        VertSplit = { fg = c.window, bg = c.window, },
        Visual = { bg = c.selection, },
        Directory = { fg = c.blue, },
        ModeMsg = { fg = c.green, },
        MoreMsg = { fg = c.green, },
        Question = { fg = c.green, },
        WarningMsg = { fg = c.red, },
        MatchParen = { bg = c.selection, },
        Folded = { fg = c.comment, bg = c.background, },
        FoldColumn = { bg = c.background, },
        CursorLine = { bg = c.line, },
        CursorColumn = { bg = c.line, },
        PMenu = { fg = c.foreground, bg = c.selection, },
        PMenuSel = { fg = c.foreground, bg = c.selection, },
        SignColumn = { bg = c.background, },
        ColorColumn = { bg = c.line, },
        Comment = { fg = c.comment, },
        Todo = { fg = c.comment, bg = c.background, },
        Title = { fg = c.comment, },
        Identifier = { fg = c.red, },
        Statement = { fg = c.foreground, },
        Conditional = { fg = c.foreground, },
        Repeat = { fg = c.foreground, },
        Structure = { fg = c.purple, },
        Function = { fg = c.blue, },
        Constant = { fg = c.orange, },
        Keyword = { fg = c.orange, },
        String = { fg = c.green, },
        Special = { fg = c.foreground, },
        PreProc = { fg = c.purple, },
        Operator = { fg = c.aqua, },
        Type = { fg = c.blue, },
        Define = { fg = c.purple, },
        Include = { fg = c.blue, },
        vimCommand = { fg = c.red, },
        cType = { fg = c.yellow, },
        cStorageClass = { fg = c.purple, },
        cConditional = { fg = c.purple, },
        cRepeat = { fg = c.purple, },
        phpVarSelector = { fg = c.red, },
        phpKeyword = { fg = c.purple, },
        phpRepeat = { fg = c.purple, },
        phpConditional = { fg = c.purple, },
        phpStatement = { fg = c.purple, },
        phpMemberSelector = { fg = c.foreground, },
        rubySymbol = { fg = c.green, },
        rubyConstant = { fg = c.yellow, },
        rubyAccess = { fg = c.yellow, },
        rubyAttribute = { fg = c.blue, },
        rubyInclude = { fg = c.blue, },
        rubyLocalVariableOrMethod = { fg = c.orange, },
        rubyCurlyBlock = { fg = c.orange, },
        rubyStringDelimiter = { fg = c.green, },
        rubyInterpolationDelimiter = { fg = c.orange, },
        rubyConditional = { fg = c.purple, },
        rubyRepeat = { fg = c.purple, },
        rubyControl = { fg = c.purple, },
        rubyException = { fg = c.purple, },
        crystalSymbol = { fg = c.green, },
        crystalConstant = { fg = c.yellow, },
        crystalAccess = { fg = c.yellow, },
        crystalAttribute = { fg = c.blue, },
        crystalInclude = { fg = c.blue, },
        crystalLocalVariableOrMethod = { fg = c.orange, },
        crystalCurlyBlock = { fg = c.orange, },
        crystalStringDelimiter = { fg = c.green, },
        crystalInterpolationDelimiter = { fg = c.orange, },
        crystalConditional = { fg = c.purple, },
        crystalRepeat = { fg = c.purple, },
        crystalControl = { fg = c.purple, },
        crystalException = { fg = c.purple, },
        pythonInclude = { fg = c.purple, },
        pythonStatement = { fg = c.purple, },
        pythonConditional = { fg = c.purple, },
        pythonRepeat = { fg = c.purple, },
        pythonException = { fg = c.purple, },
        pythonFunction = { fg = c.blue, },
        pythonPreCondit = { fg = c.purple, },
        pythonRepeat = { fg = c.aqua, },
        pythonExClass = { fg = c.orange, },
        javaScriptBraces = { fg = c.foreground, },
        javaScriptFunction = { fg = c.purple, },
        javaScriptConditional = { fg = c.purple, },
        javaScriptRepeat = { fg = c.purple, },
        javaScriptNumber = { fg = c.orange, },
        javaScriptMember = { fg = c.orange, },
        javascriptNull = { fg = c.orange, },
        javascriptGlobal = { fg = c.blue, },
        javascriptStatement = { fg = c.red, },
        coffeeRepeat = { fg = c.purple, },
        coffeeConditional = { fg = c.purple, },
        coffeeKeyword = { fg = c.purple, },
        coffeeObject = { fg = c.yellow, },
        htmlTag = { fg = c.red, },
        htmlTagName = { fg = c.red, },
        htmlArg = { fg = c.red, },
        htmlScriptTag = { fg = c.red, },
        diffAdd = { bg = c.diff.add, },
        diffDelete = { fg = c.background, bg = c.red, },
        diffChange = { bg = c.diff.change, },
        diffText = { fg = c.line, bg = c.blue, },
        ShowMarksHLl = { fg = c.orange, bg = c.background, },
        ShowMarksHLo = { fg = c.purple, bg = c.background, },
        ShowMarksHLu = { fg = c.yellow, bg = c.background, },
        ShowMarksHLm = { fg = c.aqua, bg = c.background, },
        luaStatement = { fg = c.purple, },
        luaRepeat = { fg = c.purple, },
        luaCondStart = { fg = c.purple, },
        luaCondElseif = { fg = c.purple, },
        luaCond = { fg = c.purple, },
        luaCondEnd = { fg = c.purple, },
        cucumberGiven = { fg = c.blue, },
        cucumberGivenAnd = { fg = c.blue, },
        goDirective = { fg = c.purple, },
        goDeclaration = { fg = c.purple, },
        goStatement = { fg = c.purple, },
        goConditional = { fg = c.purple, },
        goConstants = { fg = c.orange, },
        goTodo = { fg = c.yellow, },
        goDeclType = { fg = c.blue, },
        goBuiltins = { fg = c.purple, },
        goRepeat = { fg = c.purple, },
        goLabel = { fg = c.purple, },
        clojureConstant = { fg = c.orange, },
        clojureBoolean = { fg = c.orange, },
        clojureCharacter = { fg = c.orange, },
        clojureKeyword = { fg = c.green, },
        clojureNumber = { fg = c.orange, },
        clojureString = { fg = c.green, },
        clojureRegexp = { fg = c.green, },
        clojureParen = { fg = c.aqua, },
        clojureVariable = { fg = c.yellow, },
        clojureCond = { fg = c.blue, },
        clojureDefine = { fg = c.purple, },
        clojureException = { fg = c.red, },
        clojureFunc = { fg = c.blue, },
        clojureMacro = { fg = c.blue, },
        clojureRepeat = { fg = c.blue, },
        clojureSpecial = { fg = c.purple, },
        clojureQuote = { fg = c.blue, },
        clojureUnquote = { fg = c.blue, },
        clojureMeta = { fg = c.blue, },
        clojureDeref = { fg = c.blue, },
        clojureAnonArg = { fg = c.blue, },
        clojureRepeat = { fg = c.blue, },
        clojureDispatch = { fg = c.blue, },
        scalaKeyword = { fg = c.purple, },
        scalaKeywordModifier = { fg = c.purple, },
        scalaOperator = { fg = c.blue, },
        scalaPackage = { fg = c.red, },
        scalaFqn = { fg = c.foreground, },
        scalaFqnSet = { fg = c.foreground, },
        scalaImport = { fg = c.purple, },
        scalaBoolean = { fg = c.orange, },
        scalaDef = { fg = c.purple, },
        scalaVal = { fg = c.purple, },
        scalaVar = { fg = c.aqua, },
        scalaClass = { fg = c.purple, },
        scalaObject = { fg = c.purple, },
        scalaTrait = { fg = c.purple, },
        scalaDefName = { fg = c.blue, },
        scalaValName = { fg = c.foreground, },
        scalaVarName = { fg = c.foreground, },
        scalaClassName = { fg = c.foreground, },
        scalaType = { fg = c.yellow, },
        scalaTypeSpecializer = { fg = c.yellow, },
        scalaAnnotation = { fg = c.orange, },
        scalaNumber = { fg = c.orange, },
        scalaDefSpecializer = { fg = c.yellow, },
        scalaClassSpecializer = { fg = c.yellow, },
        scalaBackTick = { fg = c.green, },
        scalaRoot = { fg = c.foreground, },
        scalaMethodCall = { fg = c.blue, },
        scalaCaseType = { fg = c.yellow, },
        scalaLineComment = { fg = c.comment, },
        scalaComment = { fg = c.comment, },
        scalaDocComment = { fg = c.comment, },
        scalaDocTags = { fg = c.comment, },
        scalaEmptyString = { fg = c.green, },
        scalaMultiLineString = { fg = c.green, },
        scalaUnicode = { fg = c.orange, },
        scalaString = { fg = c.green, },
        scalaStringEscape = { fg = c.green, },
        scalaSymbol = { fg = c.orange, },
        scalaChar = { fg = c.orange, },
        scalaXml = { fg = c.green, },
        scalaConstructorSpecializer = { fg = c.yellow, },
        scalaBackTick = { fg = c.blue, },
        diffAdded = { fg = c.green, },
        diffRemoved = { fg = c.red, },
        gitcommitSummary = { },
    }
end

return M